#!/usr/bin/env bash

set -e

# Grab our starting dir
start_dir=$(pwd)
# Figure out the dir we live in
SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
# Bring in our standard functions
source $SCRIPT_DIR/stdlib.sh

usage() {
  prog=$(basename $0)

  ! read -r -d '' usage_msg <<- EOM
  Usage:
  $prog [OPTIONS] ACTION

  Helper script to setup python virtual environment for running forgeops
scripts.

  OPTIONS:
  -h|--help                 : display usage and exit
  --debug                   : turn on debugging
  --dryrun                  : do a dry run
  -v|--verboase             : be verbose

Valid actions:
  * setup      : setup python venv
  * activate   : activate venv in terminal
  * deactivate : deactivate venv in terminal
  * genreq     : used by ForgeRock to update $REQ_FILE
  * install    : run pip install command against $REQ_FILE
  * upgrade    : upgrade packages

Examples:
  Setup a fresh clone of the repo:
  $prog setup

  Display command for activating the venv
  $prog activate 

  Display command for deactivating the venv
  $prog deactivate 
EOM

  usageStd $1 "$usage_msg" "$2"

}

activate() {
  if [ -z "$VIRTUAL_ENV" ] ; then
    source bin/activate
  fi
}

activateDemo() {
  echo "Do this in $ROOT_PATH"
  echo "source bin/activate"
}

deactivate() {
  echo "Do this in $ROOT_PATH"
  echo "deactivate"
}

genreq() {
  echo "Generating requirements.txt from installed packages"
  # Need to quote command so it won't end up in the file
  runOrPrint "$PIP_CMD freeze > $REQ_FILE"
}

install() {
  echo "Installing packages"
  local opts=
  [[ "$ACTION" == "upgrade" ]] && opts="--upgrade"
  runOrPrint $PIP_CMD install $opts -r $REQ_FILE
}

setup() {
  echo "Setting up python venv in $ROOT_PATH"
  runOrPrint $VENV_CMD .
  activate
  install
}

DEBUG=false
DRYRUN=false
VERBOSE=false
REQ_FILE=requirements.txt

while true; do
  case "$1" in
    -h|--help) usage 0 ;;
    -d|--debug) DEBUG=true ; shift ;;
    --dryrun) DRYRUN=true ; shift ;;
    -v|--verbose) VERBOSE=true ; shift ;;
    "") break ;;
    *) ACTION=$1 ; shift ; break ;;
  esac
done

message "DEBUG=$DEBUG" "debug"
message "DRYRUN=$DRYRUN" "debug"
message "VERBOSE=$VERBOSE" "debug"
message "ACTION=$ACTION" "debug"

getRelativePath $SCRIPT_DIR ..
ROOT_PATH=$RELATIVE_PATH
runOrPrint cd $ROOT_PATH

if [ "$ACTION" != "setup" ] ; then
  activate
fi

if [ -x $(type -P python) ] ; then
  PYTHON_CMD=$(type -P python)
elif [ -x $(type -P python3) ] ; then
  PYTHON_CMD=$(type -P python3)
else
  echo "ERROR: Cannot find working python or python3 in your path."
  exit 1
fi
message "PYTHON_CMD=$PYTHON_CMD" "debug"

PIP_CMD="$PYTHON_CMD -m pip"
message "PIP_CMD=$PIP_CMD" "debug"
VENV_CMD="$PYTHON_CMD -m venv"
message "VENV_CMD=$VENV_CMD" "debug"

case "$ACTION" in
  activate) activateDemo ;;
  deactivate) deactivate ;;
  genreq) genreq ;;
  install) install ;;
  setup) setup ;;
  upgrade) install ;;
  *) usage 1 "Invalid action: $ACTION"
esac
